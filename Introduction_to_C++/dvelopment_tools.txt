For basic programming, you need a computer, a compiler, a text editor

There are other tools that can make your life easier

You don't need them for this course

Usually, you don't need all of them all the time

But it's improtatnt to bring all hardware


Compiling C++ can be a slow process

Full build of a large project can last up to a few hours

compilation is mostly cpu-bound and parallelizes well


Go for machins with many cores


On a large project, use a build acceleation tool :


    Distribute compilation over multiple build machiens and cache artifacts
    IncrediBuild, distcc, and FASTBuild


Every project beins with git init( or equivalent)


All code and resourcse must be under version control 

Commmit often and commit in small batchs


Even when working alone, always push your codee to a remote server

A regular backup is useful but does not replace version control 


Most major providers ( for example : GitHub, GitLab, Bitbucket) ofr free private repose 


A single-file program can be built with a single command


Anything larger rquries a build system

CMake is used throughtou this course

A build system is part of every IDE, so you can start therew
Leaern the basics of yhour build system, it will help when things gor wong

Some of the debugging can be done with log messages: More complex proglems requrie a debugger


A debugger cdan play your program in slow motion 

Have a couple of debuggers with a decent UI:

    On windows, use MS Visual STduo and WinDBG

    Use GDB if your compiler is GCC and LLDB when compiling with Clang


Debuggers with a decent UI:
    On windows, use MS Visual Studio and WinDBG
    Use GDB if your compiler is GCC and LLDB when compiling with Clang


Debuggers use symbols generated by the compiler 

By default, many build systems do not generate debug symbols in Release builds

You want to be able to debug those builds when ther are issues in production 

Save debug information and binaries of Release builds

Unit Testing 

If you love your code, you should put a a test on it: Uint test is not coverd here , but 

Many unit testing tools are available: 
Use Cicd

Version Control, bug tracker, code review integration, and so on 

Being able to do all project-related works 


Other Tools

Performance profiler
Tools for simulating slower network/ CPU 
Tools for writing and generation documentation tools, for example Doxygen
Tryo to unify the tools the tools that your team uses 


